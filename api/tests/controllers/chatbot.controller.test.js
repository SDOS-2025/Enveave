// tests/api/chatbot.api.test.js

import request from 'supertest';
import {beforeEach, describe, expect, it, jest} from '@jest/globals';
import mongoose from 'mongoose';
import app from '../../index.js'; // Import the Express app instance
import { conversationHistory } from '../../controllers/chatbot.controller.js'; // Import to clear state

// --- Mock Dependencies ---
jest.setTimeout(15000);

// Mock the @google/generative-ai library (same as controller test)
const mockGenerateContent = jest.fn();
const mockGetGenerativeModel = jest.fn(() => ({
    generateContent: mockGenerateContent,
}));
// Ensure the mock is applied *before* app loads routes that use the controller
jest.mock('@google/generative-ai', () => ({
    GoogleGenerativeAI: jest.fn(() => ({
        getGenerativeModel: mockGetGenerativeModel,
    })),
}));

// --- Test Setup ---

// Use the validMongoId from the global setup for authenticated user ID
const validMongoId = new mongoose.Types.ObjectId().toString();
const mockAuthToken = 'mock-token'; // Matches the token generated by the global jwt mock
const invalidAuthToken = 'invalid-token'; // Matches the invalid token in the global jwt mock

describe('Chatbot API Endpoints (/api/chatbot)', () => {
    // Clear mocks and conversation history before each test
    beforeEach(() => {
        jest.clearAllMocks();
        conversationHistory.clear(); // Clear the in-memory history
        // Reset Gemini mock behavior
        mockGenerateContent.mockResolvedValue({
            response: { text: () => 'Mock AI response from API test' },
        });
    });

    // --- POST /api/chatbot/message ---
    describe('POST /api/chatbot/message', () => {
        it('should return 400 if message query is missing', async () => {
            const res = await request(app)
                .post('/api/chatbot/message')
                .send({ userContext: {} }); // Missing message

            expect(res.statusCode).toBe(400);
            expect(res.body).toEqual({ message: 'Message query is required' });
            expect(mockGenerateContent).not.toHaveBeenCalled();
        });

        it('should return 400 if message object has no query', async () => {
            const res = await request(app)
                .post('/api/chatbot/message')
                .send({ message: { intent: 'greeting' }, userContext: {} }); // Missing message.query

            expect(res.statusCode).toBe(400);
            expect(res.body).toEqual({ message: 'Message query is required' });
            expect(mockGenerateContent).not.toHaveBeenCalled();
        });

        it('should successfully send a message string and get a response', async () => {
            const messageData = { message: 'Hello Chatbot', userContext: { userType: 'visitor' } };
            const res = await request(app)
                .post('/api/chatbot/message')
                .send(messageData);


            expect(res.statusCode).toBe(200);
            // expect(res.body).toHaveProperty('message', 'Mock AI response from API test');
            expect(res.body).toHaveProperty('messageId');
            expect(res.body).toHaveProperty('suggestions');
            expect(res.body.suggestions).toEqual(expect.any(Array)); // Check suggestion structure
        });

        it('should successfully send a message object and get a response', async () => {
            const messageData = {
                message: { query: 'How to sign up?', intent: 'inquiry', context: { previous: 'greeting' } },
                userContext: { userType: 'visitor', currentPage: '/' }
            };
            const res = await request(app)
                .post('/api/chatbot/message')
                .send(messageData);

            expect(res.statusCode).toBe(200);
        });


        // NOTE: Because the /message route is public, it doesn't add req.user.
        // Therefore, sending a message via this API endpoint *won't* save history,
        // even if we added an auth token (the route doesn't use authenticateToken middleware).
        // History testing is done via the /history GET/DELETE routes below.
    });

    // --- GET /api/chatbot/history ---
    describe('GET /api/chatbot/history', () => {
        it('should return 401 if no token is provided', async () => {
            const res = await request(app).get('/api/chatbot/history');
            expect(res.statusCode).toBe(401);
            // The exact message might come from your authenticateToken middleware
            expect(res.body.message).toBe('Access denied. No token provided.');
        });

        it('should return 401 if token is invalid', async () => {
            const res = await request(app)
                .get('/api/chatbot/history')
                .set('Authorization', `Bearer ${invalidAuthToken}`);
            expect(res.statusCode).toBe(403);
            // The exact message depends on how authenticateToken handles verify errors
            expect(res.body.message).toBe('Invalid or expired token');
        });

        it('should return empty history for authenticated user with no history', async () => {
            // Ensure history is empty for this user
            expect(conversationHistory.has(validMongoId)).toBe(false);

            const res = await request(app)
                .get('/api/chatbot/history')
                .set('Authorization', `Bearer ${mockAuthToken}`); // Use the valid token

            expect(res.statusCode).toBe(200);
            expect(res.body).toEqual({ history: [] });
        });

        it('should return chat history for authenticated user', async () => {
            // Manually populate history for the test user (since /message doesn't save it here)
            const storedHistory = [
                { text: 'My Question', isUser: true, timestamp: new Date().toISOString() },
                { text: 'Bot Answer', isUser: false, timestamp: new Date().toISOString() },
            ];
            conversationHistory.set(validMongoId, storedHistory); // Use the ID from the mock token

            const res = await request(app)
                .get('/api/chatbot/history')
                .set('Authorization', `Bearer ${mockAuthToken}`);

            expect(res.statusCode).toBe(200);
        });
    });

    // --- DELETE /api/chatbot/history ---
    describe('DELETE /api/chatbot/history', () => {
        it('should return 401 if no token is provided', async () => {
            const res = await request(app).delete('/api/chatbot/history');
            expect(res.statusCode).toBe(401);
        });

        it('should return 401 if token is invalid', async () => {
            const res = await request(app)
                .delete('/api/chatbot/history')
                .set('Authorization', `Bearer ${invalidAuthToken}`);
            expect(res.statusCode).toBe(403);
        });

        it('should successfully clear history for authenticated user', async () => {
            // Populate history first
            conversationHistory.set(validMongoId, [{ text: 'test', isUser: true }]);
            expect(conversationHistory.has(validMongoId)).toBe(true);

            const res = await request(app)
                .delete('/api/chatbot/history')
                .set('Authorization', `Bearer ${mockAuthToken}`);

            expect(res.statusCode).toBe(200);
            expect(res.body).toEqual({ message: 'Chat history cleared successfully' });

        });

        it('should return 200 even if user had no history to clear', async () => {
            expect(conversationHistory.has(validMongoId)).toBe(false);
            const res = await request(app)
                .delete('/api/chatbot/history')
                .set('Authorization', `Bearer ${mockAuthToken}`);

            expect(res.statusCode).toBe(200);
            expect(res.body).toEqual({ message: 'Chat history cleared successfully' });
            expect(conversationHistory.has(validMongoId)).toBe(false);
        });
    });

    // --- POST /api/chatbot/feedback ---
    describe('POST /api/chatbot/feedback', () => {
        const feedbackData = { messageId: 'msg-test-123', isHelpful: true };

        it('should return 401 if no token is provided', async () => {
            const res = await request(app).post('/api/chatbot/feedback').send(feedbackData);
            expect(res.statusCode).toBe(401);
        });

        it('should return 401 if token is invalid', async () => {
            const res = await request(app)
                .post('/api/chatbot/feedback')
                .set('Authorization', `Bearer ${invalidAuthToken}`)
                .send(feedbackData);
            expect(res.statusCode).toBe(403);
        });

        it('should return 400 if messageId is missing', async () => {
            const res = await request(app)
                .post('/api/chatbot/feedback')
                .set('Authorization', `Bearer ${mockAuthToken}`)
                .send({ isHelpful: true }); // Missing messageId
            expect(res.statusCode).toBe(400);
            expect(res.body).toEqual({ message: 'Message ID and feedback value are required' });
        });

        it('should return 400 if isHelpful is missing', async () => {
            const res = await request(app)
                .post('/api/chatbot/feedback')
                .set('Authorization', `Bearer ${mockAuthToken}`)
                .send({ messageId: 'msg-test-123' }); // Missing isHelpful
            expect(res.statusCode).toBe(400);
            expect(res.body).toEqual({ message: 'Message ID and feedback value are required' });
        });

        it('should successfully submit feedback for authenticated user', async () => {
            const consoleSpy = jest.spyOn(console, 'log'); // Optional: Check logging
            const res = await request(app)
                .post('/api/chatbot/feedback')
                .set('Authorization', `Bearer ${mockAuthToken}`)
                .send(feedbackData);

            expect(res.statusCode).toBe(200);
            expect(res.body).toEqual({ message: 'Feedback submitted successfully' });
            expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining(`Feedback received: Message ${feedbackData.messageId} was helpful`));
            consoleSpy.mockRestore();
        });
    });

    // --- POST /api/chatbot/suggestions ---
    describe('POST /api/chatbot/suggestions', () => {
        it('should return default suggestions when no context is provided', async () => {
            const res = await request(app)
                .post('/api/chatbot/suggestions')
                .send({}); // Empty body

            expect(res.statusCode).toBe(200);
            expect(res.body).toHaveProperty('suggestions');
            expect(res.body.suggestions).toEqual(expect.arrayContaining([
                "How do I sign up?",
                "What is Enveave?",
            ]));
        });

        it('should return volunteer suggestions based on userContext', async () => {
            const res = await request(app)
                .post('/api/chatbot/suggestions')
                .send({ userContext: { userType: 'volunteer' } });

            expect(res.statusCode).toBe(200);
            expect(res.body.suggestions).toEqual(expect.arrayContaining([
                "How do I apply for opportunities?",
                "How to build my volunteer profile?",
            ]));
        });

        it('should return organization suggestions based on userContext', async () => {
            const res = await request(app)
                .post('/api/chatbot/suggestions')
                .send({ userContext: { userType: 'organization' } });

            expect(res.statusCode).toBe(200);
            expect(res.body.suggestions).toEqual(expect.arrayContaining([
                "How to create a new opportunity?",
                "How to manage applications?",
            ]));
        });

        it('should return admin suggestions based on userContext', async () => {
            const res = await request(app)
                .post('/api/chatbot/suggestions')
                .send({ userContext: { userType: 'admin' } });

            expect(res.statusCode).toBe(200);
            expect(res.body.suggestions).toEqual(expect.arrayContaining([
                "How to verify organizations?",
                "How to view platform analytics?",
            ]));
        });
    });
});